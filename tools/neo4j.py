import json
import logging
import importlib.resources as resrc
from neo4j import GraphDatabase as gd
from neo4j.exceptions import Neo4jError
from IPython.core.magic import register_line_cell_magic

def connect(URL:str="neo4j://neo4j", auth:tuple=("neo4j", "llm-agents")):
    """
    A connection function for the Neo4j database. 
    Default parameters are used to connect to the docker container instance.
    """
    
    try:
        driver = gd.driver(URL , auth=auth)
    except ConnectionError:
        raise ConnectionError("Something went wrong with the connection to the database!")
    else:
        driver.verify_connectivity()
        return driver

def query_neo4j(query:str, gdb=None)->str:
    """
    A simple function that will query the neo4j database with the provided query.
    If a connection to the database is not given a default one will be used, 
    for instance the one running in the docker container.
    
    Arguments:
        query (str): The query string generated by an llm model.
        gdb (gd.driver): The connection to the database, default is None.

    Returns:
        (str): Either the results of the query or an exception.
    """
    if not gdb: gdb = connect()

    log   = logging.getLogger()
    res   = gdb.session(database="neo4j").run(query)
    data  = res.data() # Needed before we use consume
    notif = res.consume().summary_notifications

    # Due to errors mixed with warnings this is not 
    # a complete solution on how to handle them.
    # For example if you search a relationship that doesn't
    # exist the result of a match and an optional match will be the same!! 
    for n in notif:
        s = n.severity_level
        if s == "WARNING":
            raise Neo4jError(n)
        elif s == "INFORMATION":
            log.warning("%r", n)
        else:
            # severity == "UNKNOWN"
            log.info("%r", n)

    return data

def save_schema(name:str="schema.json", driver=None) -> None:
    """
    Save the schema of the database as a json file.
    The schema can be used to know entities and properties of the database.

    Arguments:
        name (str): The name of the file, a default one is already provided.
                    A string without the json extension can also be passed.
        driver (GraphDatabase.driver): Connection to the database.
                    If one is not provided a localhost one will be used.
    Return:
        (None): The return of the function is None because it will dump the result in a json.
                If the file is not generated by this function it will probably be because 
                there is nothing to dump and the database is empty.
    """
    #TODO: optimize code
    
    if not driver: driver = connect()

    if "json" not in str(name): name = name + ".json"
    name = str(resrc.files("llmagents") / name)

    res = driver.session(database="neo4j").run("""call db.schema.visualization()""").data()
    # If the list is empty or if there are no nodes, then there is nothing to dump
    if not res or not res[0]["nodes"]: return

    n = driver.session(database="neo4j").run("""call db.schema.nodeTypeProperties""").data()
    if n: # If n is not empty then it will insert properties in the list to dump
        for node in res[0]['nodes']:
            node["properties"] = []
            for nn in n:
                if node["name"] in nn["nodeLabels"]:
                    node["properties"].append(nn["propertyName"])

    rels = list(res[0]["relationships"])
    res[0]["relationships"] = []
    
    r = driver.session(database="neo4j").run("""call db.schema.relTypeProperties""").data()
    if r: # If r is not empty then it will insert detailed relations in the list to dump
        for rel in rels:
            tmp = {}
            tmp["name"]  = rel[1]
            tmp["node1"] = rel[0]["name"]
            tmp["node2"] = rel[2]["name"]
            tmp["properties"] = []
            for rr in r:
                if not r: break
                if tmp["name"] in rr["relType"]:
                    tmp["properties"].append(rr["propertyName"])
            res[0]["relationships"].append(tmp)

    with open(name, "w") as outfile:
        json.dump(res, outfile, indent=4)

@register_line_cell_magic
def cypher(line, cell=None):
    """
    It registers the magic cypher to be used in the notebook
    by the executor agent.

    Args:
        line (_type_): If only a line of code is given (%cypher <line>).
        cell (_type_, optional): If a multi-line code is given (%%cypher <newline> <cell>).

    Returns:
        _type_: The result of the query, if it wasn't successful will be an empty list.
    """
    if not cell: res = query_neo4j(line)
    else:  res = query_neo4j(cell)
    return res 