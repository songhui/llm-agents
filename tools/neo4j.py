import json
from neo4j import GraphDatabase as gd

def connect(URL:str="neo4j://neo4j", auth:tuple=("neo4j", "llm-agents")):
    """
    A connection function for the Neo4j database. 
    Default parameters are used to connect to the docker container instance.
    """
    
    gdb = gd.driver(URL, auth=auth)
    gdb.verify_connectivity

    return gdb

def query_neo4j(query:str, gdb=None)->str:
    """
    A simple function that will query the neo4j database with the provided query.
    If a connection to the database is not given a default one will be used, 
    for instance the one running in the docker container.
    
    Arguments:
        query (str): The query string generated by an llm model.
        gdb (gd.driver): The connection to the database, default is None.

    Returns:
        (str): Either the results of the query or an exception.
    """
   
    if gdb is None: 
        gdb = connect()

    try:
        records, summary, keys = gdb.execute_query(query)
        return repr(records)
    except Exception as e:
        return repr(e)

def save_schema(name:str= "schema.json", driver=None) -> None:
    """
    Save the schema of the database as a json file.
    The schema can be used to know entities and properties of the database.

    Arguments:
        name (str): The name of the file, a default one is already provided.
                    A string without the json extension can also be passed.
        driver (GraphDatabase.driver): Connection to the database.
                    If one is not provided a localhost one will be used.
    Return:
        (None): The return of the function is None because it will dump the result in a json.
                If the file is not generated by this function it will probably be because 
                there is nothing to dump and the database is empty.
    """
    #TODO: optimize code
    
    if not driver: driver = connect()

    if "json" not in str(name): name = name + ".json"

    res = driver.session(database="neo4j").run("""call db.schema.visualization()""").data()
    # If the list is empty or if there are no nodes, then there is nothing to dump
    if not res or not res[0]["nodes"]: 
        print("Nothing to dump, exiting the function call...")
        return 

    n = driver.session(database="neo4j").run("""call db.schema.nodeTypeProperties""").data()
    if n: # If n is not empty then it will insert properties in the list to dump
        for node in res[0]['nodes']:
            node["properties"] = []
            for nn in n:
                if node["name"] in nn["nodeLabels"]:
                    node["properties"].append(nn["propertyName"])

    rels = list(res[0]["relationships"])
    res[0]["relationships"] = []
    
    r = driver.session(database="neo4j").run("""call db.schema.relTypeProperties""").data()
    if r: # If r is not empty then it will insert detailed relations in the list to dump
        for rel in rels:
            tmp = {}
            tmp["name"]  = rel[1]
            tmp["node1"] = rel[0]["name"]
            tmp["node2"] = rel[2]["name"]
            tmp["properties"] = []
            for rr in r:
                if not r: break
                if tmp["name"] in rr["relType"]:
                    tmp["properties"].append(rr["propertyName"])
            res[0]["relationships"].append(tmp)

    with open(name, "w") as outfile:
        json.dump(res, outfile, indent=4)